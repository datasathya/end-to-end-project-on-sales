CREATE TABLE olist_custumer (
    customer_id VARCHAR(50) PRIMARY KEY,
    customer_unique_id VARCHAR(50),
    customer_zip_code_prefix VARCHAR(10),
    customer_city VARCHAR(255),
    customer_state VARCHAR(2)
);

UPDATE olist_custumer
SET CUSTOMER_ID = REPLACE(CUSTOMER_ID, '"', '');

UPDATE olist_custumer
SET CUSTOMER_UNIQUE_ID = REPLACE(CUSTOMER_UNIQUE_ID, '"', '');

UPDATE olist_custumer
SET  CUSTOMER_ZIP_CODE_PREFIX= REPLACE(CUSTOMER_ZIP_CODE_PREFIX, '"', '');

 SELECT CUSTOMER_UNIQUE_ID, COUNT(*) AS duplicate_count
FROM OLIST_CUSTUMER
GROUP BY CUSTOMER_UNIQUE_ID
HAVING COUNT(*) > 1;

DELETE FROM OLIST_CUSTUMER
WHERE (CUSTOMER_UNIQUE_ID, CUSTOMER_ID) NOT IN (
    SELECT CUSTOMER_UNIQUE_ID, MIN(CUSTOMER_ID)
    FROM OLIST_CUSTUMER
    GROUP BY CUSTOMER_UNIQUE_ID
);


select* from olist_custumer;

CREATE TABLE orders_list (
    order_id VARCHAR(255) PRIMARY KEY,
    customer_id VARCHAR(255),
    order_status VARCHAR(50),
    order_purchase_timestamp TIMESTAMP_NTZ(9),
    order_approved_at TIMESTAMP_NTZ(9),
    order_delivered_carrier_date TIMESTAMP_NTZ(9),
    order_delivered_customer_date TIMESTAMP_NTZ(9),
    order_estimated_delivery_date TIMESTAMP_NTZ(9)
);

UPDATE orders_list
SET ORDER_ID = REPLACE(ORDER_ID, '"', '');

UPDATE orders_list
SET CUSTOMER_ID = REPLACE(CUSTOMER_ID, '"', '');

select * from orders_list;

SELECT
    OLIST_CUSTUMER.CUSTOMER_ID,
    OLIST_CUSTUMER.CUSTOMER_STATE,
    OLIST_CUSTUMER.CUSTOMER_CITY,
    ORDERS_LIST.ORDER_ID,
    ORDERS_LIST.ORDER_APPROVED_AT,
    ORDERS_LIST.ORDER_DELIVERED_CUSTOMER_DATE
FROM
    olist_custumer
INNER JOIN
    ORDERS_LIST ON olist_custumer.CUSTOMER_ID = ORDERS_LIST.CUSTOMER_ID;


  CREATE TABLE ORDER_REVIEW (
    REVIEW_ID VARCHAR(16777216),
    ORDER_ID VARCHAR(16777216) PRIMARY KEY,
    REVIEW_SCORE NUMBER(38,0),
    REVIEW_COMMENT_TITLE VARCHAR(16777216),
    REVIEW_COMMENT_MESSAGE VARCHAR(16777216),
    REVIEW_CREATION_DATE TIMESTAMP_NTZ(9),
    REVIEW_ANSWER_TIMESTAMP TIMESTAMP_NTZ(9)
);  

UPDATE order_review
SET ORDER_ID = REPLACE(ORDER_ID, '"', '');

UPDATE order_review
SET REVIEW_ID = REPLACE(REVIEW_ID, '"', '');

select * from order_review;

CREATE TABLE orders (
    order_id STRING,
    order_item_id INTEGER,
    product_id STRING PRIMARY KEY,
    seller_id STRING,
    shipping_limit_date TIMESTAMP_NTZ,
    price FLOAT,
    freight_value FLOAT
);

UPDATE orders
SET ORDER_ID = REPLACE(ORDER_ID, '"', '');

UPDATE orders
SET PRODUCT_ID = REPLACE(PRODUCT_ID, '"', '');

UPDATE orders
SET SELLER_ID = REPLACE(SELLER_ID, '"', '');


select * from orders;

SELECT
    orders.ORDER_ID,
    orders.PRICE,
    ORDER_REVIEW.REVIEW_SCORE,
FROM
    orders
INNER JOIN
    ORDER_REVIEW ON orders.ORDER_ID = ORDER_REVIEW.ORDER_ID;

   CREATE TABLE product_list (
    product_id VARCHAR(255) ,
    product_category_name VARCHAR(255) primary key,
    product_name_length INT,
    product_description_length INT,
    product_photos_qty INT,
    product_weight_g INT,
    product_length_cm INT,
    product_height_cm INT,
    product_width_cm INT
);

CREATE TABLE order_payment (
    order_id STRING,
    payment_sequential INTEGER primary key,
    payment_type STRING,
    payment_installments INTEGER,
    payment_value FLOAT
);

UPDATE order_payment
SET ORDER_ID = REPLACE(ORDER_ID, '"', '');

CREATE TABLE PRODUCT_CATEGORIES(
    product_category_name VARCHAR(255),
    product_category_name_english VARCHAR(255)primary key
);

    
SELECT
    PRODUCT_LIST.PRODUCT_ID,
    PRODUCT_LIST.PRODUCT_CATEGORY_NAME,
    PRODUCT_CATEGORIES.PRODUCT_CATEGORY_NAME_ENGLISH
FROM
    PRODUCT_LIST
LEFT JOIN
    PRODUCT_CATEGORIES ON PRODUCT_LIST.PRODUCT_CATEGORY_NAME = PRODUCT_CATEGORIES.PRODUCT_CATEGORY_NAME;

create table new_data as    
SELECT
    OLIST_CUSTUMER.CUSTOMER_STATE,
    OLIST_CUSTUMER.CUSTOMER_CITY,
    OLIST_CUSTUMER.CUSTOMER_ID,
    ORDERS_LIST.ORDER_ID,
    ORDERS_LIST.ORDER_APPROVED_AT,
    ORDERS_LIST.ORDER_DELIVERED_CUSTOMER_DATE,
    ORDERS.PRODUCT_ID,
    ORDERS.PRICE,
    ORDER_PAYMENT.PAYMENT_TYPE,
    ORDER_PAYMENT.PAYMENT_VALUE,
    ORDER_REVIEW.REVIEW_SCORE,
    PRODUCT_LIST.PRODUCT_CATEGORY_NAME,
    PRODUCT_CATEGORIES.PRODUCT_CATEGORY_NAME_ENGLISH
    
FROM
    olist_custumer
INNER JOIN
    ORDERS_LIST ON olist_custumer.CUSTOMER_ID = ORDERS_LIST.CUSTOMER_ID
INNER JOIN
    ORDERS ON ORDERS_LIST.ORDER_ID = ORDERS.ORDER_ID
INNER JOIN
    ORDER_PAYMENT ON ORDERS.ORDER_ID = ORDER_PAYMENT.ORDER_ID
INNER JOIN
    ORDER_REVIEW ON ORDER_PAYMENT.ORDER_ID = ORDER_REVIEW.ORDER_ID
left JOIN
    PRODUCT_LIST ON ORDERS.PRODUCT_ID = PRODUCT_LIST.PRODUCT_ID
left JOIN
    PRODUCT_CATEGORIES ON PRODUCT_LIST.PRODUCT_CATEGORY_NAME = PRODUCT_CATEGORIES.PRODUCT_CATEGORY_NAME_ENGLISH;


select * from new_data;

-- duplicate values--
SELECT ORDER_ID,CUSTOMER_ID
FROM NEW_DATA
GROUP BY ORDER_ID,CUSTOMER_ID
HAVING COUNT(*) > 1;

--deleteing duplicate records--
DELETE FROM NEW_DATA 
WHERE (ORDER_ID, CUSTOMER_ID) IN (
  SELECT ORDER_ID, CUSTOMER_ID
  FROM NEW_DATA  
  GROUP BY ORDER_ID, CUSTOMER_ID
  HAVING COUNT(*) > 1
);

--- droping unnessary columns--

ALTER TABLE NEW_DATA
DROP COLUMN  PRODUCT_CATEGORY_NAME_ENGLISH;

-- handling null values--
SELECT COUNT(*) 
FROM NEW_DATA
WHERE ORDER_ID IS NULL;

SELECT COUNT(*) 
FROM NEW_DATA
WHERE CUSTOMER_ID IS NULL;

SELECT COUNT(*) 
FROM NEW_DATA
WHERE CUSTOMER_STATE IS NULL;

SELECT COUNT(*) 
FROM NEW_DATA
WHERE CUSTOMER_CITY IS NULL;

SELECT COUNT(*) 
FROM NEW_DATA
WHERE PRODUCT_ID IS NULL;

SELECT COUNT(*) 
FROM NEW_DATA
WHERE PRICE IS NULL;

SELECT COUNT(*) 
FROM NEW_DATA
WHERE PAYMENT_TYPE IS NULL;

SELECT COUNT(*) 
FROM NEW_DATA
WHERE PAYMENT_VALUE IS NULL;

SELECT COUNT(*) 
FROM NEW_DATA
WHERE REVIEW_SCORE IS NULL;

SELECT COUNT(*) 
FROM NEW_DATA
WHERE PRODUCT_CATEGORY_NAME IS NULL;




UPDATE NEW_DATA
SET ORDER_APPROVED_AT = (
  SELECT MODE(ORDER_APPROVED_AT) 
  FROM NEW_DATA
)
WHERE ORDER_APPROVED_AT IS NULL;


UPDATE NEW_DATA
SET PRODUCT_CATEGORY_NAME = (
  SELECT MODE(PRODUCT_CATEGORY_NAME) 
  FROM NEW_DATA
)
WHERE PRODUCT_CATEGORY_NAME IS NULL;

UPDATE NEW_DATA
SET ORDER_DELIVERED_CUSTOMER_DATE = (
  SELECT MODE(ORDER_DELIVERED_CUSTOMER_DATE) 
  FROM NEW_DATA
)
WHERE ORDER_DELIVERED_CUSTOMER_DATE IS NULL;

UPDATE NEW_DATA 
SET CUSTOMER_STATE = LOWER(CUSTOMER_STATE);

ALTER TABLE NEW_DATA
ADD COLUMN delivered_date DATE;

UPDATE NEW_DATA
SET delivered_date = TO_DATE(CONCAT(EXTRACT(YEAR FROM ORDER_DELIVERED_CUSTOMER_DATE), '-', EXTRACT(MONTH FROM ORDER_DELIVERED_CUSTOMER_DATE), '-', EXTRACT(DAY FROM ORDER_DELIVERED_CUSTOMER_DATE)), 'YYYY-MM-DD');

ALTER TABLE NEW_DATA
ADD COLUMN approved_date DATE;
UPDATE NEW_DATA
SET approved_date = TO_DATE(CONCAT(EXTRACT(YEAR FROM ORDER_APPROVED_AT), '-', EXTRACT(MONTH FROM ORDER_APPROVED_AT), '-', EXTRACT(DAY FROM ORDER_APPROVED_AT)), 'YYYY-MM-DD');

ALTER TABLE NEW_DATA
DROP COLUMN ORDER_APPROVED_AT, ORDER_DELIVERED_CUSTOMER_DATE;

SELECT * FROM NEW_DATA;

-- descptive anlysis--

-- average sale price--

SELECT AVG(PRICE) AS AVERAGE_SALE_PRICE
FROM NEW_DATA;

-- most common mode of payment--

SELECT mode(PAYMENT_TYPE) AS COMMON_MODE_OF_PAYMENT
FROM NEW_DATA;

-- no.of occurances of each city--
select CUSTOMER_CITY,count(CUSTOMER_CITY) from new_data group by CUSTOMER_CITY;

--- average deliviry time period--

SELECT AVG(DATEDIFF(DAY, APPROVED_DATE, delivered_date)) AS avg_delivery_time
FROM NEW_DATA;

--avg delivary cost for orders--

SELECT AVG(PAYMENT_VALUE - PRICE) AS average_delivery_cost
FROM NEW_DATA;

--- top 10 products based on review score--
SELECT PRODUCT_CATEGORY_NAME, AVG(REVIEW_SCORE) AS average_review_score
FROM NEW_DATA
GROUP BY PRODUCT_CATEGORY_NAME
ORDER BY average_review_score DESC
LIMIT 10;

-- top5 products with their price--

 SELECT PRODUCT_CATEGORY_NAME, price
FROM NEW_DATA
ORDER BY price DESC
LIMIT 5;

--- highest sale in a year--
SELECT YEAR(APPROVED_DATE) AS sales_year, SUM(PRICE) AS total_sales
FROM NEW_DATA
GROUP BY YEAR(APPROVED_DATE)
ORDER BY total_sales DESC
LIMIT 1;

--- sale trend on monthly basis--

SELECT 
    DATE_TRUNC('month', APPROVED_DATE) AS month,
    SUM(PRICE) AS total_sales
FROM 
    NEW_DATA
GROUP BY 
    DATE_TRUNC('month', APPROVED_DATE)
ORDER BY 
    month;

    --- sales based on location--

    SELECT 
    CUSTOMER_STATE,
    SUM(PRICE) AS total_sales
FROM 
    NEW_DATA
GROUP BY 
    CUSTOMER_STATE
ORDER BY 
    total_sales DESC;

    
select * from new_data;
